include mixins.jade
//
// Intro / Story
// 
+slide
  strong Highly Cohesive Software Programming
+slide
  p Let's pretend you're a software engineer
  p.fragment Senior Jawa Developer
  img.fragment.noborder(src='resources/jawa.png', width=300)
  +notes.
    Let's pretend you're a software engineer
    Let's say I have a mythical language called Jawa,
+slide
  p.fragment.dimafter new feature
+slide
  p.fragment.dimafter a service to upload translations to ci
  p.fragment ci-3po
+slide
  p.fragment.dimafter awesome. 
  p.fragment.dimafter Your teammate just finished a tool to convert resources into d3 visualizations in jawa
  p.fragment r2d3
  +notes.
    and they push it up
+slide
  p let's make them work together
  img.fragment.noborder(src='resources/c3po_r2d2_1.gif')
  p.fragment oh dear
  +notes.
    It turns out, r-2-d3 and ci-3po were both mutating the same file resources
    you see, r2d3 was built unextensibly
+slide
  p They're tangled together
  div.fragment
    img.noborder(src='resources/r2po.png')
  +notes.
    you have to hack them apart
+slide
  p Tear them apart to start over
  img(src='resources/c3po_chewie.jpg', height='300', class='noborder')
+slide
  p They were `Tightly Coupled`: Unrelated, but inseparable
+slide
  p What you wanted was `Cohesion`
  p Related things nearby.
  img.fragment.noborder(src='resources/vader_son.jpg') 
+slide
  p Benefits of High Cohesion
  p.fragment.replaceafter Enables reuse (e.g., MVC)
  p.fragment.replaceafter Minimizes refactorings
  p.fragment.replaceafter Makes things easier to test
  p.fragment Enables Separation of Concerns
+slide
  p High Cohesion: Make things easy to understand
    p.fragment.replaceafter
      img.noborder(src='resources/xkcd_star_wars.png', width='900')
      em source: http://xkcd.com/657/
    p.fragment
      img.noborder(src='resources/xkcd_primer.png', width='900')
      em source: http://xkcd.com/657/
  +notes
    p star wars may seem complicated,
    p but really, it has many characters that
    p come together occasionally, and then have their own story
    p compared to primer, with very few characters, is nearly incomprehensible
    p a movie, about time travel
+slide
  p What leads to High Cohesion?
+slide
  p Using SOLID
  p 
    em Martin Fowler
  p
    img.noborder(src='resources/martin_fowler.jpg', width='100')
  ul
    li.fragment.dimafter Single Responsibility 
    li.fragment.dimafter Open/Closed
    li.fragment.dimafter Liskov Substitution
    li.fragment.dimafter Interface Segregation
    li.fragment Dependency Inversion
  +notes.
    Martin fowler, prominent OO proponent
    the solid princples are
+slide
  p not the only advocate
+slide
  p tightly coupled code is unmockable
  +notes.
    you see, it's hard to write unit tests if your code is uncohesive
+slide
  p Google Testability Team Testable Software Principles
  img.noborder(src='resources/misko.jpg', width='100')
  p 
    em Jonathan Wolter, Russ Ruffer, Mi≈°ko Hevery
  ul
    li.fragment.dimafter Class does too much
    li.fragment.dimafter Reaching into collaborators
    li.fragment.dimafter Has Singletons
    li.fragment Constructors do real work
  +notes.
+slide
  h2 Holub on Patterns
  p 
    em Allen Holub
  p
    img.noborder(src='resources/allen_holub.jpg')
  ul
    li.fragment.dimafter Extends is evil
    li.fragment.dimafter Getters and Setters are evil
  +notes.
    Allen holub promonent JavaWorld, Dr. Dobbs
    Consultant
+slide
  h2 All just different angles on same ideas:
  ol
    li.fragment Minimize objects' scope
    li.fragment Minimize objects' responsibilities
  +notes.
    Can derive e.g., SOLID principles from these.
+slide
  p Going to explain:
  ul
    li.fragment.dimafter objects
    li.fragment.dimafter how to limit their scope
    li.fragment.dimafter how to limit their responsibilities
+slide
  p You will
  ul
    li.fragment.dimafter build better abstractions
    li.fragment.dimafter reduce work writing tests
    li.fragment.dimafter have more fun programming